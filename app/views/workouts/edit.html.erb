<%= javascript_include_tag "jquery-2.1.1.min.js" %>
<%= javascript_include_tag "jquery-ui.min.js" %>
<%= stylesheet_link_tag "excersise_edit.css" %>

<script>

var workout_id = <%= @workout.id %>;
var current_group = <%= @workout.excersises.inject (0) { |memo, item| if item.group != nil && item.group > memo then item.group; else memo; end } %>

$(function () {

		$(document).tooltip();

		});

// Add action listeners to the workout name so it is saved when it is edited
// also we want to stop the enter key from adding a line return when the enter
// key is pressed
$(function () {
	$("#workout_header").keydown( function(e) {
			if( e.keyCode == 13 )
			{
				e.preventDefault();
			}

			});

	$("#workout_header").keyup( function(e) {
			
			update_name();

			});
	});

$(function() {
		$("#excersises").sortable({placeholder: "excersise-placeholder", helper: 'clone', axys: 'y', 
				cancel: '.excersise_group,.excersise_name,.excersise_type,.excersise_diffculty,.excersise_sets,.excersise_reps,.excersise_delete,.message',
				stop: function(event, ui) { 
					update_column_title_color();
					update_positions();
					}});
		});

// Function runs when the page loads and it updates
// the colors of the excersises
$(window).bind("load", function() {
		if( current_group != 0 )
		{
			update_colors();
		}
		});

// Fuction runs when the user scrolls down the page
// it updates the color of the title bar to be the same
// as the excersise it is currently over
$(document).scroll( function() {
			update_column_title_color();
			});

// Function runs when the page loads or is resized
// and makes sure the container is correctly positioned
//$(window).on("load resize", function() {
//			var widthDiffrence = $(window).width() - 950;
//
//			if( widthDiffrence > 0 )
//			{
//				var newLeft = widthDiffrence/2;
//				$("#container").css({left: newLeft});
//			}
//			else
//			{
//				$("#container").css({left: 0});
//			}
				
//			});


function update_positions()
{
	// Itterates through all the excersises and for each one make an AJAX
	// call to the excersises update_position action to save its location
	var pos = 0;
	$("#excersises").children("a").each(function() {
				var xmlhttp;

				if( window.XMLHttpRequest )
				{
					xmlhttp = new XMLHttpRequest();
				}
				else
				{
					xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
				}

				xmlhttp.onreadystatechange = function()
				{
					if( xmlhttp.readyState == 4 && xmlhttp.status == 200 )
					{
						// Dont need to do anything
					}
				}

				xmlhttp.open("GET", "/excersises/update_position?id=" + this.id + "&position=" + (pos), true);
				xmlhttp.send();

				pos += 1;
			});	
}

function update_column_title_color()
{
	// Caclulate what current excersise the header is over
	var scrolled = $(document).scrollTop();
	var currentExcersise = parseInt( ( scrolled - 20 ) / 100);

	// Get the <a> tag containing the excersise we want
	var element = $("#excersises a:nth-child(" + (currentExcersise+1) + ")").get(0);

	if( $("#column_titles").css("background-color") != $("#excersise_" + element.id).css("background-color") )
	{
		// Set the color of the column header to the color of that excersise
		$("#workout_header").animate({backgroundColor: $("#excersise_" + element.id).css("background-color")});
		$("#column_titles").animate({backgroundColor: $("#excersise_" + element.id).css("background-color")});
	}
}

function update_colors()
{
	// Make sure the color range is split over enough
	// of a range to give a smmoth color change
	var max_range = current_group;
	if( max_range < 10 ) max_range = 10;

	// Caclulate what current excersise the header is over and get its id
	var scrolled = $(document).scrollTop();
	var currentExcersise = parseInt(scrolled / 100);
	var currentId = $("#excersises a:nth-child(" + (currentExcersise+1) + ")").get(0).id;


	// Update the color of the header so it matches the first excersise background
	var first = $("#excersises").children("a").first();
	var first_group = document.getElementById("excersise_group_" + first.attr('id')).innerText;
	var rgb = HSBtoRGB(parseInt(first_group) * ( 100.0 / max_range ), 0.68, 0.66);

	$("#workout_header").animate({backgroundColor: "rgb(" + parseInt(rgb[0]) + ", " + parseInt(rgb[1]) + ", " + parseInt(rgb[2]) + ")"});
	$("#column_titles").animate({backgroundColor: "rgb(" + parseInt(rgb[0]) + ", " + parseInt(rgb[1]) + ", " + parseInt(rgb[2]) + ")"});

	// Update the colors of the excersises
	$("#excersises").children("a").each(function() {
			var group = document.getElementById("excersise_group_" + this.id).innerText;

			var rgb = HSBtoRGB(parseInt(group) * ( 100.0 / max_range ), 0.68, 0.66);
			$("#excersise_"+this.id).animate({backgroundColor: "rgb(" + parseInt(rgb[0]) + ", " + parseInt(rgb[1]) + ", " + parseInt(rgb[2]) + ")"});

			if( this.id == currentId ) $("#excersise_" + this.id).promise().done( function() {
					update_column_title_color();
					});
			});
}

function create_new_excersise()
{
	// Create an AJAX request to the creat action in the excersise controller to create
	// a new excersise in the databse adnd spend it to the specified workout
	var xmlhttp;

	if( window.XMLHttpRequest )
	{
			xmlhttp = new XMLHttpRequest();
	}
	else
	{
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}

	// When the AJAX request returns scusseful then add the new excersise to the webpage
	xmlhttp.onreadystatechange = function()
	{
		if( xmlhttp.readyState == 4 && xmlhttp.status == 200 )
		{
			var id = xmlhttp.responseText.trim();

			var excersises = document.getElementById("excersises");

			// Empty the div if there are 0 groups
			if( current_group == 0 ) excersises.innerHTML = "";

			// Increment the current group
			current_group += 1;

			var newA = document.createElement('a');
			newA.className = "excersise_container";
			newA.id = id;
			newA.addEventListener("change", edit_excersise_event);
			newA.addEventListener("keyup", edit_excersise_event);
				
			var excersiseContainer = document.createElement('div');
			excersiseContainer.addEventListener("focusout", update_colors);
			excersiseContainer.id = ("excersise_" + id);
			excersiseContainer.className = "excersise";

			var excersiseHandle = document.createElement('div');
			excersiseHandle.addEventListener("mousedown", blockfy);
			excersiseHandle.addEventListener("mouseup", unblockfy);
			excersiseHandle.id = ("excersise_handle_" + id);
			excersiseHandle.className = "excersise_handle";

			excersiseContainer.appendChild(excersiseHandle);

			var excersiseGroup = document.createElement('div');

			excersiseGroup.id = ("excersise_group_" + id);
			excersiseGroup.className = "excersise_group";
			excersiseGroup.title = "To link excersises together as a super set, set there group to be the same";
			excersiseGroup.innerText = current_group;
			excersiseGroup.contentEditable = 'true';

			excersiseContainer.appendChild(excersiseGroup);

			var excersiseName = document.createElement('div');
			excersiseName.id = ("excersise_name_" + id);
			excersiseName.className = "excersise_name";
			excersiseName.title = "what should the excersise be called, 4 to 20 charactors";
			excersiseName.innerText = "Name";
			excersiseName.contentEditable = 'true';

			excersiseContainer.appendChild(excersiseName);

			var excersiseType = document.createElement('div');
			excersiseType.id = ("excersise_type_" + id);
			excersiseType.className = "excersise_type";

			var excersiseTypeSelect = document.createElement('select');
			excersiseTypeSelect.addEventListener("change", change_units_event);
			excersiseTypeSelect.id = ("excersise_type_select_" + id);
			excersiseTypeSelect.className = "excersise_type_select";

			var weightBasedOption = document.createElement('option');
			weightBasedOption.innerText = "Weight Based";
			excersiseTypeSelect.appendChild(weightBasedOption);

			var timeBasedOption = document.createElement('option');
			timeBasedOption.innerText = "Time Based";
			excersiseTypeSelect.appendChild(timeBasedOption);

			var bodyWeightBasedOption = document.createElement('option');
			bodyWeightBasedOption.innerText = "Body Weight";
			excersiseTypeSelect.appendChild(bodyWeightBasedOption);

			excersiseType.appendChild(excersiseTypeSelect);

			excersiseContainer.appendChild(excersiseType);

			var excersiseDiffculty = document.createElement('div');
			excersiseDiffculty.id = ("excersise_diffculty_" + id);
			excersiseDiffculty.className = "excersise_diffculty";

			var excersiseDiffcultyMagnitude = document.createElement('div');

			excersiseDiffcultyMagnitude.id = ("excersise_diffculty_magnitude_" + id);
			excersiseDiffcultyMagnitude.className = "excersise_diffculty_magnitude";
			excersiseDiffcultyMagnitude.title = "For a weight based excersise this is where you put the KG's you are lifting, should be a number greater than 0";
			excersiseDiffcultyMagnitude.innerText = "1.0";
			excersiseDiffcultyMagnitude.contentEditable = 'true';

			excersiseDiffculty.appendChild(excersiseDiffcultyMagnitude);

			var excersiseDiffcultyUnits = document.createElement('div');

			excersiseDiffcultyUnits.id = ("excersise_diffculty_units_" + id);
			excersiseDiffcultyUnits.class = "excersise_diffculty_units";
			excersiseDiffcultyUnits.innerText = "kg";

			excersiseDiffculty.appendChild(excersiseDiffcultyUnits);

			excersiseContainer.appendChild(excersiseDiffculty);

			var excersiseSets = document.createElement('div');

			excersiseSets.id = ("excersise_sets_" + id);
			excersiseSets.className = "excersise_sets";
			excersiseSets.title = "How many times will you repeat this excersise, should be an integer greater than 0";
			excersiseSets.innerText = "1";
			excersiseSets.contentEditable = 'true';

			excersiseContainer.appendChild(excersiseSets);

			var excersiseReps = document.createElement('div');

			excersiseReps.id = ("excersise_reps_" + id);
			excersiseReps.className = "excersise_reps";
			excersiseReps.title = "How many times will you do this excersise every set, should be an integer greater than 0";
			excersiseReps.innerText = "1";
			excersiseReps.contentEditable = "true";

			excersiseContainer.appendChild(excersiseReps);

			newA.appendChild(excersiseContainer);
			
			excersises.appendChild(newA);

			update_colors();
			update_positions();
		}
	}

	xmlhttp.open("GET", "/excersises/create?workoutid=" + workout_id + "&group=" + (current_group+1), true);
	xmlhttp.send();
}

function edit_excersise_event(event)
{
	// If the action listener detects a key press and its not a tab then
	// run the edit excersise function for the excersise
	if( event.keyCode != 9 )
	{
		var s = event.srcElement.id.split("_");
		var id = s[s.length-1];

		edit_excersise(parseInt(id));
	}
}

function edit_excersise(id)
{

	// Make sure the color range is split over enough
	// of a range to give a smmoth color change
	var max_range = current_group;
	if( max_range < 10 ) max_range = 10;

	// Tell the user that the workout isnt saved by changing the color of the header
	//$("#column_titles").animate({backgroundColor: "#EEEEEE"});
	//$("#header").animate({backgroundColor: "#EEEEEE"});
	//$("#workout_header").animate({backgroundColor: "#EEEEEE"});
	//if( $("#excersise_" + id).css("background-color") != "rgb(236, 238, 238)" )
	//{
	//	$("#excersise_" + id).animate({backgroundColor: "#EEEEEE"}, 50);
	//}

	// Ensure that the groups are correct
	ensure_groups(id);
	
	// Get all the information about the excersise that needs to be saved
	var group = document.getElementById("excersise_group_" + id).innerText;
	var name = document.getElementById("excersise_name_" + id).innerText;
	var type_select = document.getElementById("excersise_type_select_" + id);
	var type = 0;
	if( type_select[type_select.selectedIndex].value == "Weight Based" || type_select[type_select.selectedIndex].value == "Time Based" || type_select[type_select.selectedIndex].value == "Body Weight")
	{
		type = type_select.selectedIndex + 1;	
	}
	var diffculty = document.getElementById("excersise_diffculty_magnitude_" + id).innerText;
	var sets = document.getElementById("excersise_sets_" + id).innerText;
	var reps = document.getElementById("excersise_reps_" + id).innerText;

	// If any of the fields dont have a value then dont send the AJAX
	// request
	if( group == "" || ( name.length < 4 ) || type == 0 || diffculty == "" || sets == "" || reps == "" )
	{
		return;
	}

	// AJAX For saving exversise
	var xmlhttp;

	if( window.XMLHttpRequest )
	{
		xmlhttp = new XMLHttpRequest();
	}
	else
	{
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}

	xmlhttp.onreadystatechange = function()
	{
		if( xmlhttp.readyState == 4 && xmlhttp.status == 200 )
		{
			if( id.toString() != xmlhttp.responseText.trim() && xmlhttp.responseText != "nc" )
			{
				show_error("An Error Occored While Saving, Check Fields");	
			}	
			else
			{
				//var rgb = HSBtoRGB(parseInt(group) * ( 100.0 / max_range ), 0.68, 0.66);
				//$("#excersise_" + id).animate({backgroundColor: "rgb(" + parseInt(rgb[0]) + ", " + parseInt(rgb[1]) + ", " + parseInt(rgb[2]) + ")"}, 50);
			}
		}
	}


	xmlhttp.open("GET", "/excersises/update?id=" + id + "&group=" + group + "&name=" + name + "&type=" + type + "&diffculty=" + diffculty + "&sets=" + sets + "&reps=" + reps, true);
	xmlhttp.send();
}

function ensure_groups(current_id)
{
	var i = 0;
	var max_group = 0;
	var children = $("#excersises").children();
	$("#excersises").children().each( function() {
			
			var id = $(this).attr('id');
			var group = document.getElementById("excersise_group_" + id).innerText;

			if( parseInt(group) > max_group )
			{
				max_group = parseInt(group);
			}

			if( group == "" ) return false;

			// If this is the first one make sure that it has group 1
			if( i == 0 )
			{
				if( parseInt(group) != 1 )
				{
					document.getElementById("excersise_group_" + id).innerText = 1;

					if( id != current_group ) update_group(id, 1);
				}
			}
			else
			{
				// Get the prevous group and ensure that the group sequence is continous
				var prevId = $(children[i-1]).attr('id');
				var prevGroup = parseInt(document.getElementById("excersise_group_" + prevId).innerText);

				if( parseInt(group) != prevGroup && parseInt(group) != ( prevGroup + 1 ) )
				{
					document.getElementById("excersise_group_" + id).innerText = (prevGroup + 1);

					if( id != current_group ) update_group(id, prevGroup + 1);
				}
			}

			i += 1;
			


		});

	current_group = max_group;

	update_colors();

}

function update_group(id, group)
{
	var xmlhttp;

	if( window.XMLHttpRequest )
	{
		xmlhttp = new XMLHttpRequest();
	}	
	else
	{
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}

	xmlhttp.open("GET", "/excersises/update_group?id=" + id + "&group=" + group, true);
	xmlhttp.send();
}

function update_name()
{	
	var name = document.getElementById("workout_name").innerText;

	// Verify that the name has appriate length and only contains letters, numbers
	// and white space
	if( name.length > 20 || name.length < 5 || name.search(/[^\w\s]/) != -1 )
	{
		//$("#workout_name").tooltip().mouseover();
		show_error("That isnt a valid name!");
		return false;
	}

	// Creates an AJAX request to update the name of the workout if it is changed
	var xmlhttp;

	if( window.XMLHttpRequest )
	{
		xmlhttp = new XMLHttpRequest();
	}
	else
	{
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}

	xmlhttp.onreadystatechange = function()
	{
		if( xmlhttp.readyState == 4 && xmlhttp.status == 200 )
		{
			// Nothing needed
		}
	}

	xmlhttp.open("GET", "/workouts/update_name?id=" + workout_id + "&name=" + name, true);
	xmlhttp.send();
}

function change_units_event(event)
{
	// Calls the change units function if the action listener
	// is what is picking up the change
	var s = event.srcElement.id.split("_");
	var id = s[s.length-1];

	change_units(parseInt(id));
}

function change_units(id)
{
	// Based on what type the excersise is it sets the units of the
	// excersise diffculty
	var type_select = document.getElementById("excersise_type_select_" + id);

	document.getElementById("excersise_diffculty_magnitude_" + id).contentEditable = 'true';

	if( type_select[type_select.selectedIndex].value == "Weight Based" )
	{
		document.getElementById("excersise_diffculty_units_" + id).innerHTML = "<span></span>kg";
	}
	else if(type_select[type_select.selectedIndex].value == "Time Based")
	{
		document.getElementById("excersise_diffculty_units_" + id).innerHTML = "<span></span>sec";
	}
	else if(type_select[type_select.selectedIndex].value == "Body Weight")
	{
		document.getElementById("excersise_diffculty_units_" + id).innerHTML = "";
		document.getElementById("excersise_diffculty_magnitude_" + id).innerHTML = "0";
		document.getElementById("excersise_diffculty_magnitude_" + id).contentEditable = 'false';
	}
}

function HSBtoRGB(h, s, l)
{
	var C = (1 - Math.abs(2 * l - 1)) * s;
	var Hp = h/60.0;
	var x = C * ( 1 - Math.abs(Hp%2 - 1));

	var r;
	var g;
	var b;

	if( Hp >= 0 && Hp < 1 )
	{
		r = C;
		g = x;
		b = 0;
	}
	else if( Hp >= 1 && Hp < 2 )
	{
		r = x;
		g = C;
		b = 0;
	}
	else if( Hp >= 2 && Hp < 3 )
	{
		r = 0;
		g = C;
		b = x;
	}
	else if( Hp >= 3 && Hp < 4 )
	{
		r = 0;
		g = x;
		b = C;
	}
	else if( Hp >= 4 && Hp < 5 )
	{
		r = x;
		g = 0;
		b = C;
	}	
	else if( Hp >= 5 && Hp < 6 )
	{
		r = C;
		g = 0;
		b = x;
	}

	m = l - (1/2.0) * C;

	return [255 * (r+m), 255 * (g+m), 255 * (b+m)];
}


function blockfy()
{
	// Sets all the excersise divs to have the display style block
	// this is so they can be dragged around
	$("#excersises").children("a").each(function() {
				$("#" + this.id).css({display: "block"});
			});
}

function unblockfy()
{
	// Un does what blockfy does
	$("#excersises").children("a").each(function() {
				$("#" + this.id).css({display: "inline"});
			});
}

function destroy_excersise(id)
{
	// Creates a AJAX request to remove the excersise from the database
	var xmlhttp;

	if( window.XMLHttpRequest )
	{
		xmlhttp = new XMLHttpRequest();
	}
	else
	{
		xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
	}

	xmlhttp.onreadystatechange = function()
	{
		if( xmlhttp.readyState == 4 && xmlhttp.status == 200 )
		{
			$("#" + id).remove();
			ensure_groups();
		}
	}

	xmlhttp.open("GET", "/excersises/destroy?id=" + id, true);
	xmlhttp.send();
	
}
</script>

<div id="container">
<div id="workout_header">
	<div id="workout_name" contentEditable='true' title="Edit the name of the workout, name must be between 5 and 20 charactors and no special charactors">
		<%= @workout.name %>
	</div>

	<div id="column_titles">
		<div id="excersise_handle_header" class="excersise_handle">
		</div>

		<div id="excersise_group_header" class="excersise_group">
			<span></span>Group
		</div>

		<div id="excersise_name_header" class="excersise_name">
			<span></span>Name
		</div>

		<div id="excersise_type_header" class="excersise_type">
			<span></span>Type
		</div>

		<div id="excersise_diffculty_header" class="excersise_diffculty">
			<span></span>Diffculty
		</div>

		<div id="excersise_sets_header" class="excersise_sets">
			<span></span>Starting Sets
		</div>

		<div id="excersise_reps_header" class="excersise_reps">
			<span></span>Reps
		</div>
	</div>

</div>

<a id="create_excersise_button" onclick="create_new_excersise()" title="New Excersise">
	<%= image_tag "plus.gif" %>
</a>

<div id="excersises">
	<% if @excersises.size == 0 %>
		<p class="message">There are currently no excersises in this workout</p>
	<% else %>
		<% @excersises.each do |excersise| %>

			<a id="<%= excersise.id %>" class="excersise_container" onchange="edit_excersise(<%= excersise.id %>)" onkeyup="if(this.keyCode != 9) edit_excersise(<%= excersise.id %>);">
				<div id="excersise_<%= excersise.id %>" class="excersise" onfocusout="update_colors()">
					<div id="excersise_handle_<%= excersise.id %>" class="excersise_handle" onmousedown="blockfy()" onmouseup="unblockfy()">
						H
					</div>

					<div id="excersise_group_<%= excersise.id %>" class="excersise_group" contentEditable='true' title="To link excersises together as a super set, set there group to be the same">
						<%= excersise.group %>
					</div>

					<div id="excersise_name_<%= excersise.id %>" class="excersise_name" contentEditable='true' title="what should the excersise be called, 4 to 20 charactors">
						<%= excersise.name %>
					</div>

					<div id="excersise_type_<%= excersise.id %>" class="excersise_type">
						<select id="excersise_type_select_<%= excersise.id %>" class="excersise_type_select" onchange="change_units(<%= excersise.id %>)">
							<option <%= if excersise.excersisetype == 1 then "selected='selected'"; end%>>Weight Based</option>
							<option <%= if excersise.excersisetype == 2 then "selected='selected'"; end%>>Time Based</option>
							<option <%= if excersise.excersisetype == 3 then "selected='selected'"; end%>>Body Weight</option>
						</select>
					</div>

					<div id="excersise_diffculty_<%= excersise.id %>" class="excersise_diffculty">
						<div id="excersise_diffculty_magnitude_<%= excersise.id %>" class="excersise_diffculty_magnitude" <%= "contentEditable='true'" if excersise.excersisetype != 3 %> title="For a weight based excersise this is where you put the KG's you are lifting, should be a number greater than 0">
							<%= excersise.diffculty %>
						</div>
						<div id="excersise_diffculty_units_<%= excersise.id %>" class="excersise_diffculty_units">
							<%= excersise.get_units %>
						</div>
					</div>

					<div id="excersise_sets_<%= excersise.id %>" class="excersise_sets" contentEditable='true' title="How many times will you repeat this excersise, should be an integer greater than 0">
						<%= excersise.sets %>
					</div>

					<div id="excersise_reps_<%= excersise.id %>" class="excersise_reps" contentEditable='true' title="How many times will you do this excersise every set, should be an integer greater than 0">
						<%= excersise.reps %>
					</div>

					<div id="excersise_delete_<%= excersise.id %>" class="excersise_delete" onclick="destroy_excersise(<%= excersise.id %>)">
						<span></span>X
					</div>

				</div>
			</a>
		<% end %>
	<% end %>
</div>


